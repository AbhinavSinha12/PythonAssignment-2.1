Assignment 2.1
Problem Statement 1: 
Write a Python Program to implement your own myreduce() function which works exactly like Python's built-in function reduce()

from functools import reduce

def myreduce(function, iterable = None ):
    if iterable == None:
        return None
    it = iter(iterable)
    try:
        start = next(it)
    except StopIteration:
        raise TypeError('myreduce() of empty sequence with no initial value')
    final_value = start
    for x in iterable[1:]:
        final_value = function(final_value, x)
    return final_value
    
print  (myreduce(lambda x,y: x+y))         # None

print (myreduce(lambda x,y: x+y, [3]))          # 3
print (lambda x,y: x+y, [3])          # 3
print (myreduce(lambda x,y: x+y, [-1, 4, -2]))  # 1
print (reduce(lambda x,y: x+y, [-1, 4, -2]))  # 1

print (myreduce(lambda x,y: x*y, [-1, 4, -2]))  # 8
print (reduce(lambda x,y: x*y, [-1, 4, -2]))  # 8

Output

None
3
<function <lambda> at 0x10760d7b8> [3]
1
1
8
8

Another My reduce implementation 

def myreduce(func, iterable, start=None):
    it = iter(iterable)
    if start is None:
        try:
            start = next(it)
        except StopIteration:
            raise TypeError('reduce() of empty sequence with no initial value')
    accum_value = start
    for x in iterable:
        accum_value = func(accum_value, x)
    return accum_value

def fact(n):
    if n == 0 or n == 1:
        return 1
    return fact(n-1) * n

def reduce_func(x,y):
    return x * fact(y)

lst = [1, 3, 1]
print (myreduce(reduce_func, lst))

Output

6


Problem Statement 2: 
Write a Python program to implement your own myfilter() function which works exactly like Python's built-in function filter()

def myfilter(function, iterable):
    return [x for x in iterable if function(x)]

def even(X):
    if X % 2:
        return True
    return False

print (myfilter(even, [0, 1, 2, 3, 4, 5, 6])) #[1, 3, 5]
filterList = filter(even, [0, 1, 2, 3, 4, 5, 6]) #[1, 3, 5]
for i in filterList:
    print(i, end=" ")

print()
number_list = range(-5, 5)
less_than_zero = list(filter(lambda x: x < 0, number_list))
for i in less_than_zero:
    print(i, end=" ")

print()
less_than_zero = list(myfilter(lambda x: x < 0, number_list))
print(less_than_zero)

Output

[1, 3, 5]
1 3 5 
-5 -4 -3 -2 -1 
[-5, -4, -3, -2, -1]
